<?php

use Drupal\user\UserInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function school_members_user_presave(UserInterface $user) {
    // If creating a new user, and if current user has role school_admin:
    //   1. new user should have role school_member
    //   2. new user's school should be same as current user's school
    //   3. new user's locale should be same as current user's locale
    if ($user->isNew()) {
        $current_user = User::load(Drupal::currentUser()->id());
        if ($current_user->hasRole('school_admin')) {
            $user->addRole('school_member');
            $user->set('field_school', $current_user->get('field_school')->getValue());
            $user->set('timezone', $current_user->getTimeZone());
        }
    }
    // Make sure the profile email field is synced with the core email field
    $user->set('field_profile_email', $user->getEmail());
}

/**
 * Implements hook_form_alter().
 */
function school_members_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    // disable advanced search
    if ($form_id == 'search_form') {
        $form['advanced'] = NULL;
    }
}

/**
 * Implements hook_entity_type_build().
 */
function school_members_entity_type_build(array &$entity_types) {
  $entity_types['user']
    ->setFormClass('edit_school', 'Drupal\user\ProfileForm');
}

/**
 * Implements hook_entity_create_access().
 */
function school_members_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if ($context['entity_type_id'] != 'user') {
    return AccessResult::neutral();
  }
  return AccessResult::allowedIfHasPermission($account, 'create users');
}