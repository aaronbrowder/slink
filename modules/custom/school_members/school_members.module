<?php

use Drupal\user\UserInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function school_members_user_presave(UserInterface $user) {
    // If creating a new user, and if current user has role school_admin:
    //   1. new user should have role school_member
    //   2. new user's school should be same as current user's school
    //   3. new user's locale should be same as current user's locale
    if ($user->isNew()) {
        $current_user = User::load(Drupal::currentUser()->id());
        if ($current_user->hasRole('school_admin')) {
            $user->addRole('school_member');
            $user->set('field_school', $current_user->get('field_school')->getValue());
            $user->set('timezone', $current_user->getTimeZone());
        }
    }
    // Make sure the profile email field is synced with the core email field
    $user->set('field_profile_email', $user->getEmail());
}

/**
 * Implements hook_form_alter().
 */
function school_members_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    // disable advanced search
    if ($form_id == 'search_form') {
        $form['advanced'] = NULL;
    }
    // notify new user of account by default
    if ($form_id == 'user_register_form') {
        $form['account']['notify']['#default_value'] = TRUE;
    }
    // never show revision information in a content edit form
    $form['revision_information']['#access'] = false;
}

/**
 * Implements hook_entity_type_build().
 */
function school_members_entity_type_build(array &$entity_types) {
  $entity_types['user']
    ->setFormClass('edit_school', 'Drupal\user\ProfileForm');
}

/**
 * Implements hook_entity_create_access().
 */
function school_members_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
    if ($context['entity_type_id'] != 'user') {
        return AccessResult::neutral();
    }
    return AccessResult::allowedIfHasPermission($account, 'create users');
}

/**
 * Implements hook_user_login().
 */
function school_members_user_login($account) {
    // after login, redirect to the page they were on before logging in
    $current_route = \Drupal::routeMatch()->getRouteName();
    if (in_array($current_route, ['user.reset', 'user.reset.login'])) {
        return;
    }
    $tempstore = \Drupal::service('user.shared_tempstore')->get('school_members');
    $redirect_path = $tempstore->get('redirect_path');
    if ($redirect_path != NULL) {
        $response = new RedirectResponse($redirect_path, 302);
        $response->send();
    }
}

/**
 * Implements hook_mail_alter().
 */
function school_members_mail_alter(&$message) {
    // modify the message when a user contacts another user
    if (!empty($message['id']) && $message['id'] == 'contact_user_mail') {
        
        $site_name = \Drupal::config('system.site')->get('name');
        $language = \Drupal::languageManager()->getLanguage($message['langcode']);
        $options = ['langcode' => $language->getId()];
        $sender = $message['params']['sender'];
        
        $variables = [
            '@recipient-name' => $message['params']['recipient']->getDisplayName(),
            '@site-name' => \Drupal::config('system.site')->get('name'),
            '@sender-name' => $sender->getDisplayName(),
            '@sender-school' => $sender->field_school->entity->getTitle(),
            '@sender-url' => $sender->url('canonical', ['absolute' => TRUE, 'language' => $language])
        ];
        
        $message['body'] = [];
        $message['body'][] = t('Hello @recipient-name,', $variables, $options);
        $message['body'][] = t("@sender-name (@sender-url) from @sender-school has sent you a message via your contact form at @site-name.", $variables, $options);
        $build = entity_view($message['params']['contact_message'], 'mail');
        $message['body'][] = \Drupal::service('renderer')->renderPlain($build);
    }
}